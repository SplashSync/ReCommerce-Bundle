<?php

/*
 *  This file is part of SplashSync Project.
 *
 *  Copyright (C) Splash Sync  <www.splashsync.com>
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 */

/**
 * API Shipment Stage
 *
 * (For Stage environment) This API manage `Shipment` (of order) and its preparation in warehouse.
 *
 * OpenAPI spec version: 2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiProperty;
use ApiPlatform\Core\Annotation\ApiResource;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Class representing the Transport Unit model.
 *
 * @ApiResource(
 *      compositeIdentifier=false,
 *      collectionOperations={
 *          "get":      {
 *              "path": "/shipment/{shipment}/transport-unit",
 *              "controller": {"App\Controller\TransportUnitController", "listAction"},
 *          },
 *          "post":     {
 *              "path": "/shipment/{shipment}/transport-unit",
 *              "controller": {"App\Controller\TransportUnitController", "postAction"},
 *          }
 *     },
 *     itemOperations={
 *          "get":      {
 *              "path": "/shipment/{shipment}/transport-unit/{id}",
 *              "controller": {"App\Controller\TransportUnitController", "getAction"},
 *          },
 *          "delete":   {
 *              "path": "/shipment/{shipment}/transport-unit/{id}",
 *              "controller": {"App\Controller\TransportUnitController", "deleteAction"},
 *          }
 *     },
 *     attributes={
 *          "normalization_context"={"groups"={"read"}},
 *          "denormalizationContext"={"groups"={"write"}}
 *     }
 * )
 *
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks()
 */
class TransportUnit
{
    /**
     * Unique identifier for the TransportUnit among all the API
     *
     * @var int
     *
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     *
     * @Assert\NotNull()
     * @Assert\Type("string")
     *
     * @ApiProperty(identifier=true)
     *
     * @Groups({"read"})
     */
    public $id;

    /**
     * Shipment identifier
     *
     * @var Shipment
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\Shipment", inversedBy="transportUnits")
     *
     * @ApiProperty(identifier=true)
     */
    public $shipment;

    /**
     * Type of the TransportUnit. Attributes and validations are different depending on this type
     *
     * @var string
     *
     * @ORM\Column
     *
     * @Assert\NotNull()
     * @Assert\Choice({ "parcel", "pallet" })
     * @Assert\Type("string")
     *
     * @Groups({"read", "write"})
     */
    public $type;

    /**
     * Only for type 'parcel'. Carrier's tracking number - unique among other Shipment's transport units
     *
     * @var null|string
     *
     * @ORM\Column
     *
     * @Assert\Type("string")
     *
     * @Groups({"read", "write"})
     */
    public $trackingNumber;

    /**
     * Only for type 'pallet'. Identifier of the pallet given by the carrier - unique among other Shipment's transport units
     *
     * @var null|string
     *
     * @ORM\Column
     *
     * @Assert\Type("string")
     *
     * @Groups({"read", "write"})
     */
    public $name;

    /**
     * Only for type 'pallet'. Pallet height in cm
     *
     * @var null|int
     *
     * @ORM\Column(type="integer")
     *
     * @Assert\Type("int")
     *
     * @Groups({"read", "write"})
     */
    public $height = 0;

    /**
     * Only for type 'pallet'. Pallet width in cm
     *
     * @var null|int
     *
     * @ORM\Column(type="integer")
     *
     * @Assert\Type("int")
     *
     * @Groups({"read", "write"})
     */
    public $width = 0;

    /**
     * Only for type 'pallet'. Pallet depth in cm
     *
     * @var null|int
     *
     * @ORM\Column(type="integer")
     *
     * @Assert\Type("int")
     *
     * @Groups({"read", "write"})
     */
    public $depth = 0;

    /**
     * Only for type 'pallet'. Transport unit weight in kg
     *
     * @var null|float
     *
     * @ORM\Column(type="float")
     *
     * @Assert\Type("float")
     *
     * @Groups({"read", "write"})
     */
    public $weight;

    /**
     * @var DateTime
     *
     * @ORM\Column(type="datetime")
     *
     * @Assert\NotNull()
     * @Assert\Type("DateTime")
     *
     * @Groups({"read"})
     */
    public $created;

    /**
     * Details of Boxes Included in Transport Unit
     *
     * @var Box[]
     *
     * @Assert\All({
     *   @Assert\Type("App\Entity\Box")
     * })
     *
     * @ORM\OneToMany(targetEntity="App\Entity\Box", mappedBy="transportUnit", cascade={"all"})
     */
    public $box;

    /**
     * Details of Boxes Included in Transport Unit
     *
     * @var array
     *
     * @Assert\NotNull()
     * @Assert\Type("array")
     *
     * @Groups({"write"})
     */
    public $boxes;

    /**
     * Number of Boxes Included in Transport Unit
     *
     * @var int
     *
     * @Assert\NotNull()
     * @Assert\Type("int")
     *
     * @Groups({"read"})
     */
    protected $countBoxes;

    /**
     * Transport Unit Constructor
     */
    public function __construct()
    {
        $this->box = new ArrayCollection();
    }

    /**
     * Gets Number of Boxes Included in Transport Unit.
     *
     * @return int
     */
    public function getCountBoxes(): int
    {
        return $this->box->count();
    }

    //====================================================================//
    // ORM EVENTS
    //====================================================================//

    /**
     * @ORM\PrePersist()
     */
    public function onPrePersist(): void
    {
        $this->created = new DateTime();
    }
}
